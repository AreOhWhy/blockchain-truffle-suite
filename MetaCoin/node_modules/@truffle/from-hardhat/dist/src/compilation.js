"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fromBuildInfo = void 0;
const CompileSolidity = __importStar(require("@truffle/compile-solidity"));
const fromBuildInfo = (buildInfo) => {
    const sourceIndexes = SourceIndexes.fromBuildInfo(buildInfo);
    return {
        sourceIndexes,
        sources: Sources.fromBuildInfo(buildInfo, sourceIndexes),
        contracts: Contracts.fromBuildInfo(buildInfo),
        compiler: {
            name: "solc",
            version: buildInfo.solcLongVersion
        }
    };
};
exports.fromBuildInfo = fromBuildInfo;
var SourceIndexes;
(function (SourceIndexes) {
    SourceIndexes.fromBuildInfo = (buildInfo) => {
        const sourceIndexes = [];
        for (const { index, sourcePath } of Object.entries(buildInfo.output.sources).map(([sourcePath, source]) => ({ index: source.id, sourcePath }))) {
            sourceIndexes[index] = sourcePath;
        }
        return sourceIndexes;
    };
})(SourceIndexes || (SourceIndexes = {}));
var Sources;
(function (Sources) {
    Sources.fromBuildInfo = (buildInfo, sourceIndexes) => sourceIndexes.map(sourcePath => {
        const inputSource = buildInfo.input.sources[sourcePath];
        const outputSource = buildInfo.output.sources[sourcePath];
        return {
            sourcePath,
            contents: inputSource.content,
            ast: outputSource.ast,
            language: buildInfo.input.language
        };
    });
})(Sources || (Sources = {}));
var Contracts;
(function (Contracts) {
    Contracts.fromBuildInfo = (buildInfo) => {
        const contracts = [];
        for (const [sourcePath, sourceContracts] of Object.entries(buildInfo.output.contracts)) {
            for (const [contractName, compilerOutputContract] of Object.entries(sourceContracts)) {
                const contract = {
                    contractName,
                    sourcePath,
                    source: buildInfo.input.sources[sourcePath].content,
                    sourceMap: compilerOutputContract.evm.bytecode.sourceMap,
                    deployedSourceMap: compilerOutputContract.evm.deployedBytecode.sourceMap,
                    legacyAST: undefined,
                    ast: buildInfo.output.sources[sourcePath].ast,
                    abi: compilerOutputContract.abi,
                    metadata: compilerOutputContract.metadata,
                    bytecode: CompileSolidity.Shims.zeroLinkReferences({
                        bytes: compilerOutputContract.evm.bytecode.object,
                        linkReferences: CompileSolidity.Shims.formatLinkReferences(compilerOutputContract.evm.bytecode.linkReferences)
                    }),
                    deployedBytecode: CompileSolidity.Shims.zeroLinkReferences({
                        bytes: compilerOutputContract.evm.deployedBytecode.object,
                        linkReferences: CompileSolidity.Shims.formatLinkReferences(compilerOutputContract.evm.deployedBytecode.linkReferences)
                    }),
                    compiler: {
                        name: "solc",
                        version: buildInfo.solcLongVersion
                    },
                    devdoc: undefined,
                    userdoc: undefined,
                    immutableReferences: compilerOutputContract.evm.deployedBytecode.immutableReferences,
                    generatedSources: compilerOutputContract.evm.bytecode
                        .generatedSources,
                    deployedGeneratedSources: compilerOutputContract.evm.deployedBytecode.generatedSources
                };
                contracts.push(contract);
            }
        }
        return contracts;
    };
})(Contracts || (Contracts = {}));
//# sourceMappingURL=compilation.js.map