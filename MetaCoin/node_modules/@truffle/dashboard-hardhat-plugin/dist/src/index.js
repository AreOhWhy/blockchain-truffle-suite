"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const package_json_1 = require("../package.json");
const url_1 = require("url");
const config_1 = require("hardhat/config");
const plugins_1 = require("hardhat/plugins");
const dashboard_message_bus_client_1 = require("@truffle/dashboard-message-bus-client");
const FromHardhat = __importStar(require("@truffle/from-hardhat"));
const config_2 = __importDefault(require("@truffle/config"));
require("./type-extensions");
const defaults = {
    networkName: "truffleDashboard",
    host: "localhost",
    port: 24012,
    gas: "auto",
    gasPrice: "auto",
    gasMultiplier: 1,
    timeout: 0,
    httpHeaders: {}
};
(0, config_1.extendConfig)((config, userConfig) => {
    // Validate configuration and fill in defaults for missing user config fields
    const { dashboardNetworkName, dashboardNetworkConfig: dashboardNetworkUserConfig } = getTruffleDashboardUserConfig(config, userConfig);
    // Look for custom Truffle Dashboard configuration inside truffle-config.js
    // (if it exists)
    const { host, port } = detectDashboardSettings();
    // Generate URL and supply other plugin invariants
    // (e.g., accounts should always be "remote" for Truffle Dashboard)
    const dashboardNetworkConfig = Object.assign({ url: `http://${host}:${port}/rpc`, accounts: "remote" }, dashboardNetworkUserConfig);
    // Capture completed configuration
    config.truffle = {
        dashboardNetworkName,
        dashboardNetworkConfig
    };
    // Add managed network
    config.networks[dashboardNetworkName] = dashboardNetworkConfig;
});
(0, config_1.task)("compile", "Compile with Truffle Dashboard support").setAction(async (taskArgs, env, runSuper) => {
    // Run Hardhat compilation
    const result = await runSuper();
    try {
        await FromHardhat.expectHardhat();
        // Extract Truffle Dashboard host and port from complete Hardhat config
        const { hostname: host, port } = new url_1.URL(env.config.truffle.dashboardNetworkConfig.url);
        console.log("Preparing Truffle compilation");
        // Prepare Truffle compilations
        let compilations = await FromHardhat.prepareCompilations();
        // Create Message Bus client
        let messageBusClient = new dashboard_message_bus_client_1.DashboardMessageBusClient({
            host,
            port: parseInt(port)
        });
        console.log("Sending Truffle compilation to dashboard");
        // Send Truffle compilations to dashboard
        const publishLifecycle = await messageBusClient.publish({
            type: "cli-event",
            payload: {
                label: "workflow-compile-result",
                data: { compilations }
            }
        });
        publishLifecycle.abandon();
        console.log("Compilation successfully sent!");
    }
    catch (hardhatError) {
        console.warn("The Truffle Dashboard plugin failed to compile: ", hardhatError);
    }
    return result;
});
function detectDashboardSettings() {
    let truffleConfig;
    try {
        truffleConfig = config_2.default.detect();
    }
    catch (_a) {
        truffleConfig = {
            dashboard: {}
        };
    }
    const { host = defaults.host, port = defaults.port } = truffleConfig.dashboard;
    return {
        host,
        port
    };
}
function getTruffleDashboardUserConfig(config, userConfig) {
    const { dashboardNetworkName = defaults.networkName, dashboardNetworkConfig: dashboardNetworkUserConfig = {} } = userConfig.truffle || {};
    const { gas = defaults.gas, gasPrice = defaults.gasPrice, gasMultiplier = defaults.gasMultiplier, timeout = defaults.timeout, httpHeaders = defaults.httpHeaders } = dashboardNetworkUserConfig;
    const dashboardNetworkConfig = {
        gas,
        gasPrice,
        gasMultiplier,
        timeout,
        httpHeaders
    };
    const networkIsDefinedExplicitly = userConfig.networks && dashboardNetworkName in userConfig.networks;
    if (networkIsDefinedExplicitly) {
        throw new plugins_1.HardhatPluginError(package_json_1.name, `Manual network config disallowed.\n\n` +
            `This plugin manages your Truffle Dashboard network config for you,\n` +
            `but your Hardhat config also contains \`config.networks["${dashboardNetworkName}"]\`.\n\n` +
            `You can fix this error by removing \`config.networks["${dashboardNetworkName}"]\`.\n\n` +
            `Please see the README for more details about how to configure this plugin:\n` +
            `  https://www.npmjs.com/package/@truffle/dashboard-hardhat-plugin`);
    }
    return {
        dashboardNetworkName,
        dashboardNetworkConfig
    };
}
//# sourceMappingURL=index.js.map